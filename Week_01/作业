#删除排序数组中的重复项
public int removeDuplicates(int[] nums) {
        if(nums.length==0){
            return 0;
        }
        int j=0;
        for(int i=1;i<nums.length;i++){
            if(nums[i]!=nums[j]){
                j++;
                nums[j]=nums[i];
            }
        }
        return j+1;
    }


#旋转数组
public void rotate(int[] nums, int k) {
        int length=nums.length;
        int[] nums_copy=new int[length];
        System.arraycopy(nums,0,nums_copy,0,length);
        k=k%length;
        for(int i=0;i<length;i++){
            if(i+k<length){
                nums[i+k]=nums_copy[i];
            }else{
                nums[i+k-length]=nums_copy[i];
            }
        }
    }
public void rotate(int[] nums, int k) {
        int length=nums.length;
        k = k % length;
        int count = 0,start=0;
        while (count < length) {
            int current = start;
            int prev = nums[start];
            do {
                int next = (current + k) % length;
                int temp = nums[next];
                nums[next] = prev;
                prev = temp;
                current = next;
                count++;
            } while (start != current);
            start++;
        }
    }


#合并两个有序链表
public ListNode mergeTwoLists(ListNode l1, ListNode l2) {
        if(l1==null){
            return l2;
        }
        if(l2==null){
            return l1;
        }
        if(l1.val>l2.val){
            l2.next=mergeTwoLists(l1,l2.next);
            return l2;
        }else{
            l1.next=mergeTwoLists(l1.next,l2);
            return l1;
        }
    }
public ListNode mergeTwoLists(ListNode l1, ListNode l2) {
        ListNode head = new ListNode(-1);
        ListNode pre = head;
        while(l1!=null&&l2!=null){
            if(l1.val>l2.val){
                pre.next = l2;
                l2 = l2.next;
            }else{
                pre.next = l1;
                l1 = l1.next;
            }
            pre=pre.next;
        }
        pre.next = l1!=null?l1:l2;
        return head.next;
    }


#合并两个有序数组
public void merge(int[] nums1, int m, int[] nums2, int n) {
        int p1=m-1,p2=n-1,p=m+n-1;
        while(p1>=0&&p2>=0){
            if(nums1[p1]>nums2[p2]){
                nums1[p]=nums1[p1];
                p1--;
            }else{
                nums1[p]=nums2[p2];
                p2--;
            }
            p--;
        }
        System.arraycopy(nums2,0,nums1,0,p2+1);
    }


#两数之和
public int[] twoSum(int[] nums, int target) {
        int[] res = new int[2];
        int length=nums.length;
        for(int i=0;i<length-1;i++){
            int compare=target-nums[i];
            for(int j = i+1;j<length;j++){
                if(nums[j]==compare){
                    res[0]=i;
                    res[1]=j;
                    return res;
                }
            }
        }
        return res;
    }


#移动零
public void moveZeroes(int[] nums) {
        int j=0;
        for(int i=0;i<nums.length;i++){
            if(nums[i]!=0){
                if(i>j){
                    nums[j]=nums[i];
                    nums[i]=0;
                }
                j++;
            }
        }
    }


#加一
public int[] plusOne(int[] digits) {
        for(int i=digits.length-1;i>=0;i--){
            digits[i]++;
            if(digits[i]%10!=0){
                return digits;
            }else{
                digits[i]=0;
            }
        }
        int[] res = new int[digits.length+1];
        res[0]=1;
        return res;
    }




